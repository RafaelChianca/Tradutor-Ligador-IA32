section .text
EscreverInteiro: push dword ebp            ;Salva o valor de ebp na pilha
mov ebp, esp			  ;Copia o valor da posição de esp para ebp
mov eax, [ebp+8]          ;Coloca o conteúdo de ebp+8 em eax (endereço do conteudo a ser impresso)
mov eax, [eax]            ;Coloca o numero a ser impresso em eax
sub ebx, ebx              ;Zera o contador ebx
push dword ebx            ;Bota ebx na pilha (quantidade de elementos que foram impressos)
cdq                       ;Extende o sinal de eax em edx
cmp edx, 0                ;Analisa se o número é negativo
je GetNumPortionToPrint
xor dword eax, 0xFFFFFFFF ;Faz o 'Ou' exclusivo, removendo o negativo
add dword eax, 1          ;Soma 1 para ter o numero positivo equivalente ao negativo
push dword eax            ;Salva o numero transformado em positivo na pilha
mov dword edx, 45         ;Coloca o '-' no edx
push dword edx            ;Bota o '-' na pilha
mov dword eax, ebp        ;Bota o endereço de ebp em eax
sub dword eax, 12         ;Subtrai 12 de eax, fazendo com que em eax fique o endereço do item '45' (-)
mov edx, 1                ;Quantos caracteres serão impressos
mov dword ecx, eax        ;O que será impresso (eax contem o endereço do conteúdo '-')
mov ebx, 1                ;Descritor do arquivo (stdout)
mov eax, 4                ;Número de chamada do sistema (sys_write)
int 0x80                  ;Chamada do kernel
add dword esp, 4          ;Remove o edx da pilha
pop dword eax             ;Restaura o valor de eax
add dword [ebp-4], 1    ;Adiciona 1 no contador de itens impressos
sub ebx, ebx              ;Zera o contador ebx

GetNumPortionToPrint: add ebx, 4                ;Adiciona em ebx para saber qntos itens irao para a pilha
mov ecx, 10               ;Coloca 10 no divisor
cdq                       ;Extende o sinal de eax em edx
div dword ecx             ;Divide o numero por 10
push dword edx            ;Coloca o remainder na pilha
cmp eax, 0                ;Verifica se o número já foi colocado na pilha por completo
jg GetNumPortionToPrint   ;Faz o loop até que todos os digitos estejam na pilha individualmente

printNumberByNumber: add dword [ebp - 4], 1    ;Adiciona 1 no contador de itens impressos
sub dword ebx, 4          ;Subtrai 4 do contador (4 bytes)
pop dword eax             ;Pega o primeiro item a ser impresso
push dword ebx            ;Salva o contador na pilha
add dword	eax, 48 	  ;transforma em char numérico (soma 0x30) no conteudo a ser impresso
push dword eax            ;Bota o endereço do próximo item a ser impresso na pilha
mov edx, 1                ;Quantos caracteres serão impressos
mov dword ecx, esp        ;O que será impresso (esp está apontando para o endereço do conteúdo)
mov ebx, 1                ;Descritor do arquivo (stdout)
mov eax, 4                ;Número de chamada do sistema (sys_write)
int 0x80                  ;Chamada do kernel
add dword esp, 4          ;Apaga o conteudo impresso da pilha
pop dword ebx             ;Restaura o contador de itens da pilha
cmp ebx, 0                ;Verifica se já foram todos os itens
jne printNumberByNumber   ;Caso ainda não tenha ido todos, volta para o loop
call EscreveEnter		  ;Escreve o enter no final da impressão
pop dword eax             ;Bota em eax a quantidade de itens impressos
add dword eax, 1		  ;Soma o '0xA' que foi impresso no final
pop dword ebp			  ;Restaura o valor de ebp
ret 4				      ;desenpilha o retorno para o PC e o argumento (numero que foi impresso)

EscreverChar: push dword ebp            ;Salva o valor de ebp na pilha
mov ebp, esp			  ;Copia o valor da posição de esp para ebp
mov eax, [ebp+8]          ;Coloca o conteúdo de ebp+8 em eax (endereço do conteudo a ser impresso)
mov edx, 1                ;Quantos caracteres serão impressos
mov dword ecx, eax        ;O que será impresso (eax contem o endereço do conteúdo)
mov ebx, 1                ;Descritor do arquivo (stdout)
mov eax, 4                ;Número de chamada do sistema (sys_write)
int 0x80                  ;Chamada do kernel
call EscreveEnter		  ;Escreve o enter no final da impressão
pop dword ebp			  ;Restaura o valor de ebp
mov dword eax, 2          ;Retorna a quantidade de caracteres impressos em eax (1 caracter + 0xA)
ret 4				      ;desenpilha o retorno para o PC e o argumento (numero que foi impresso)


EscreverCharSemEnter: push dword ebp            ;Salva o valor de ebp na pilha
mov ebp, esp			  ;Copia o valor da posição de esp para ebp
mov eax, [ebp+8]          ;Coloca o conteúdo de ebp+8 em eax (endereço do conteudo a ser impresso)
mov edx, 1                ;Quantos caracteres serão impressos
mov dword ecx, eax        ;O que será impresso (eax contem o endereço do conteúdo)
mov ebx, 1                ;Descritor do arquivo (stdout)
mov eax, 4                ;Número de chamada do sistema (sys_write)
int 0x80                  ;Chamada do kernel
pop dword ebp			  ;Restaura o valor de ebp
mov dword eax, 2          ;Retorna a quantidade de caracteres impressos em eax (1 caracter + 0xA)
ret 4				      ;desenpilha o retorno para o PC e o argumento (numero que foi impresso)


EscreveEnter: push dword ebp            ;Salva o valor de ebp na pilha
mov ebp, esp			  ;Copia o valor da posição de esp para ebp
push dword 0xA	  		  ;Bota o caracter 'enter' na pilha (ebp-4)
mov dword eax, ebp		  ;Bota o endereço de ebp em eax
sub dword eax, 4          ;Posiciona o conteudo de eax para apontar para '0xA' (enter)
mov edx, 1                ;Quantos caracteres serão impressos
mov dword ecx, eax        ;O que será impresso (eax contem o endereço do conteúdo)
mov ebx, 1                ;Descritor do arquivo (stdout)
mov eax, 4                ;Número de chamada do sistema (sys_write)
int 0x80                  ;Chamada do kernel
add dword esp, 4		  ;Desenpilha o '0xA'
pop dword ebp			  ;Restaura o valor de ebp
ret


EscreverString:  enter 0,0
  mov dword ebx, [ebp+12] ;copia o endereço para ebx
  mov dword ecx, [ebp+8] ;copia o tamanho máximo
  push dword 0	;Bota 0 no contador de caracteres impressos
loop3:
  push ecx ;salva o contador
  push ebx ;salva o endereço
  push ebx ;endereço que está o char
  call EscreverCharSemEnter
  pop ebx ;recupera o endereço
  pop ecx ;recupera o contador
  add dword [esp], 1	;Adiciona 1 no contador de caracteres impressos
  cmp byte [ebx], 0xA
  je  FimDaString
  add ebx, 0x1 ; aumenta em 1B
  loop loop3 ;se não for 0 pula
  add dword [esp], 1	;Adiciona 1 no contador de caracteres impressos
  call EscreveEnter		  ;Escreve o enter no final da impressão

FimDaString: mov eax, [esp] ;quantidade escrita
  leave
  ret 8



LeerInteiro: push dword ebp      ;Salva o valor de ebp na pilha
mov ebp, esp	    ;Copia o valor da posição de esp para ebp
push dword 0        ;Reserva espaço na pilha para o contador de caracteres lidos (ebp-4)
push dword 0        ;Reserva na pilha espaço para a flag se o número é negativo (0 - positivo, 1 - negativo) (ebp-8)
mov dword eax, esp  ;Bota em eax o endereço de esp
sub dword eax, 4    ;Posiciona eax para a próxima posição da pilha
push dword 0        ;Bota zero no conteudo da pilha esp-4
push dword eax      ;bota na pilha o endereço da próxima posição (que é exatamente esp-4), em esp-8
call LeerChar
add dword [ebp-4], 1 ;Adiciona 1 ao contador de caracteres lidos
cmp dword [esp], 45       ;Analisa se o numero é negativo ('-' no inicio)
jne LeituraInteiroLoop
mov dword [ebp-8], 1  ;Número negativo
add dword esp, 4      ;Remove o caracter '-' da pilha
sub dword [ebp-4], 1  ;Remove do contador de caracteres lido o '-' (para evitar problemas no loop TransformaEmInteiro, é readicionado essa quantidade futuramente)
  ;Loop para ler o inteiro até o enter
LeituraInteiroLoop: mov dword eax, esp  ;Bota em eax o endereço de esp
sub dword eax, 4    ;Posiciona eax para a próxima posição da pilha
push dword 0        ;Bota zero no conteudo da pilha esp-4
push dword eax      ;bota na pilha o endereço da próxima posição (que é exatamente esp-4), em esp-8
call LeerChar
add dword [ebp-4], 1 ;Adiciona 1 ao contador de caracteres lidos
cmp dword [esp], 0xA       ;Analisa se acabou a digitação (foi digitado um 'enter')
jne LeituraInteiroLoop  ;Caso ainda não tenha sido um enter
add dword esp, 4      ;Remove o enter da pilha
mov dword eax, 1      ;Coloca 1 no multiplicador numérico
mov dword ecx, [ebp-4]  ;Bota em ecx a quantidade de caracteres lido
sub dword ecx, 1      ;Remove o 'enter' lido
mov dword edx, [ebp + 8]  ;Bota em edx o endereço da variavel que será colocado a leitura do inteiro
mov dword [edx], 0 ;Bota ZERO no conteudo da variavel que será colocado a leitura do inteiro

TransformaEmInteiro: pop dword ebx       ;Bota o caracter lido em ebx (do último para o primeiro)
sub dword ecx, 1    ;Subtrai 1 do contador de inteiros
sub dword ebx, 0x30 ;Transforma de char em numero
push dword eax      ;Salva o conteudo de eax na pilha
imul dword ebx      ;Ajusta a posição do caracter no inteiro
mov dword edx, [ebp + 8]  ;Bota em edx o endereço da variavel que será colocado a leitura do inteiro
add dword [edx], eax  ;Salva no conteudo da variavel o valor já convertido para inteiro
pop dword eax     ;Restaura o valor de eax
mov dword ebx, 10 ;Bota o numero 10 em ebx
imul dword ebx    ;Multiplica eax por 10
cmp dword ecx, 0  ;Caso ja tenha lido todos os caracteres
jne TransformaEmInteiro
cmp dword [ebp-8], 0  ;Verifica se o numero era negativo
je  FimLeituraInteiro
add dword [ebp-4], 1  ;Adiciona o '-' como caracter lido
mov dword edx, [ebp + 8]  ;Bota em edx o endereço da variavel que será colocado a leitura do inteiro
sub dword [edx], 1  ;Subtrai 1 do numero inteiro
xor dword [edx], 0xFFFFFFFF ;Faz o 'Ou' exclusivo, adicionando o negativo

FimLeituraInteiro: mov dword eax, [ebp-4]    ;Bota em eax a quantidade de caracteres lidos
mov dword esp, ebp    ;Apaga todos os itens da pilha
pop dword ebp       ;Restaura o valor de ebp
ret 4



LerHexa: enter 4,0
mov dword [ebp-4], 0; zera o contador
mov dword ebx, [ebp+12]; copia o endereço para ebx
mov dword ecx, [ebp+8]; copia o tamanho máximo
loop2: push ecx ;salva o tamanho máximo
push ebx ;salva o endereço
push ebx ;endereço de retorno do char
call LeerChar
pop ebx ;recupera o endereço
pop ecx ;recupera tamanho maximo
add dword[ebp-4], 0x1 ; contador ++
cmp dword [ebx], 0x0A ;se for enter pula
je retorno2
add dword ebx, 0x1 ;aumenta o endereço em 1B
cmp dword [ebp-4], ecx ;limite máximo estabelecido pelo usuário
jb loop2
retorno2: mov eax, dword[ebp-4] ; move a quantidade lida para eax
leave
ret 8 ;elimina o endereço que foi gravado da pilha




LeerChar: push dword ebp      ;Salva o valor de ebp na pilha
mov ebp, esp	    ;Copia o valor da posição de esp para ebp
mov edx, 1          ;Quantos caracteres serão lidos
mov ecx, [ebp + 8]  ;O endereço de onde será escrito o caracter digitado
mov ebx, 0          ;Descritor do arquivo (stdin)
mov eax, 3          ;Chamada do sistema 3 (sys_read)
int 80h             ;Chamada do kernel
pop dword ebp       ;Restaura o valor de ebp
mov dword eax, 1    ;Bota em eax a quantidade de caracteres lidos
ret 4


LeerString:  enter 4,0
  mov dword [ebp-4], 0 ; zera o contador
  mov dword ebx, [ebp+12] ;copia o endereço para ebx
  mov dword ecx, [ebp+8] ;copia o tamanho máximo
loop2: push ecx ;salva o tamanho máximo
  push ebx ;salva o endereço
  push ebx ;endereço de retorno do char
  call LeerChar
  pop ebx ;recupera o endereço
  pop ecx ; recupera tamanho maximo
  add dword[ebp-4], 0x1 ; contador ++
  cmp dword [ebx], 0x0A ;se for enter pula
  je retorno2
  add dword ebx, 0x1 ;aumenta o endereço em 1B
  cmp dword [ebp-4], ecx ;limite máximo estabelecido pelo usuário
  jb loop2
retorno2: mov eax, dword[ebp-4] ; move a quantidade lida para eax
  leave
  ret 8 ;elimina o endereço que foi gravado da pilha
